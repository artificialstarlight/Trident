----Instruction set for Trident----

***********************************************************
Opcodes are one tryte (6 trits) and usually have a 1-3 tryte
operand, or argument(s).

They must be preceded by 3 leading zeroes, to make the
instruction a tryte. They are omitted in this documentation
for formatting purposes.

There are 9 registers, 0-8, each a tryte. Register 0 acts as
an accumulator, while register 8 is used like an index.

There is a one tribble (3-trit) flag register. Flags are
C- carry/borrow
Z- Zero Flag
X- Unused

6813 trytes of memory total, 729 trytes are reserved for the
system/any future things I might want to put in there, like
a fontset or simple OS. As of now, it's kinda empty.

There are likely to be contradictions and/or mistakes in this
instruction set that I did not notice. Feedback is 
appreciated.

************************************************************

000 llllll llllll [JP] - Jumps to the specified address. Operand 
		  xxxxxx is loaded to the program counter.
		  The next instruction is fetched from the
		  location designated by the new contents of
		  the PC.

001 xxxxxx [AND] - Logical ternary AND between the operand and 
		   register 0. Result is stored in register 0.

002 xxxxxx [OR] - Logical ternary OR between operand and 
		  register 0.

010 xxxxxx [XOR] - Ternary XOR

011 rrrrrr [NOT] - Standard ternary inversion of the specified
		   register. 

012 rrrrrr [PTI] - Positve-biased ternary inversion of the
		   specified register.

020 rrrrrr [NTI] - Negative-biased ternary inversion of the
		   specified register.

021 xxxxxx [SUM] - Logical ternary modulo-3 SUM of the operand
		   and register 0.

022 rrrrrr ssssss [LDR] - Load contents of Register S into
			 Register R.

100 rrrrrr xxxxxx [LD] - Loads integer xxxxxx into the
			 specified register.

101 rrrrrr [ADD] - Contents of register R are added to
		   register 0.

102 rrrrrr [SUB] - Contents of register R are subtracted from
		   register 0.

110 xxxxxx [CP] - Contents of the operand are compared with
		  the contents of Register 0. If it is true,
		  Flag 1 (Zero Flag) is set.

111 rrrrrr [INC] - Increments the specified register

112 rrrrrr [DEC] - Decrements the specified register

120 ------ [NOP] - No operation for that cycle

121 ------ [CLS] - Clears the screen

122 rrrrrr xxxxxx [SNE] - Skips next instruction if the
			  specified register is not equal to
			  the operand.

200 rrrrrr ssssss [SE] - Skips next instruction if the two
			 specified registers are equal.

201 rrrrrr [PUSH] - Pushes the value of the register onto the
		    stack. The stack pointer is 
		    incremented by 1.

202 rrrrrr [POP] - Pops the value from the stack pointer into 
		   the specified register. The stack pointer
		   is incremented by 1.

210 ------ [RET] - Return from subroutine. The PC is set to
		   the address at the top of the stack, and 
		   the stack pointer is subtracted by 1.

211 xxxxxx yyyyyy nnnnnn [DRW] - nnnnnn trytes of memory, 
				starting at 
			      the address in register 8 + the
				address in register 7, are
			      read and XORed onto the screen
			      at coordinates xxxxxx yyyyyy.
			      

212 llllll llllll rrrrrr [LDM] - Loads registers 0-rrrrrr into 
			  memory, starting at the address
			  llllll llllll. 

220 llllll llllll [LDS] - Initialize the stack pointer to the
			  specified address llllll llllll.

221 rrrrrr [KEY] - Wait for a key press, then store the value
		   of the key into register rrrrrr.

222 ffffff llllll llllll - Jumps to address llllll llllll if 
			   flag ffffff is set. Flags are 
			   labled as 000000 - 000002.